pipeline {
    agent any

    tools {
        nodejs 'NodeJS_24'
    }

    environment {
        REPORT_DIR = 'allure-report'
        TARGET_DIR = 'allure-reports'
        REPO_URL   = "https://${GITHUB_TOKEN}@github.com/markadvk/playwright-portfolio.git"
        BRANCH_NAME = "${env.BRANCH_NAME ?: 'main'}"
        NODE_MODULES_CACHE = "${WORKSPACE}\\.node_modules_cache"
        PLAYWRIGHT_BROWSERS_CACHE = "${WORKSPACE}\\.playwright_cache"
    }

    parameters {
        choice(
            name: 'TEST_SUITE',
            choices: ['all', 'smoke', 'functional', 'regression'],
            description: 'Select which test suite to run'
        )
    }

    options {
        ansiColor('xterm')
        timestamps()
        timeout(time: 60, unit: 'MINUTES')
    }

    stages {

        stage('Clean Workspace') {
            steps {
                echo "üßπ Cleaning workspace..."
                deleteDir()
            }
        }

        stage('Checkout') {
            steps {
                echo "üì• Checking out source code..."
                checkout scm
            }
        }

        stage('Restore Caches') {
            steps {
                echo "üìÇ Restoring caches..."
                // Node modules cache
                script {
                    if (fileExists("${NODE_MODULES_CACHE}\\package-lock.json")) {
                        echo "‚úÖ Restoring node_modules from cache"
                        bat "xcopy /E /I /Y ${NODE_MODULES_CACHE} node_modules"
                    }
                }

                // Playwright browsers cache
                script {
                    if (fileExists("${PLAYWRIGHT_BROWSERS_CACHE}")) {
                        echo "‚úÖ Restoring Playwright browser cache"
                        bat "xcopy /E /I /Y ${PLAYWRIGHT_BROWSERS_CACHE} node_modules\\playwright\\.local-browsers"
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo "üì¶ Installing npm dependencies..."
                bat 'npm ci'

                // Save caches
                echo "üíæ Saving caches..."
                bat "rmdir /s /q ${NODE_MODULES_CACHE} 2>nul || echo 'No old cache'"
                bat "xcopy /E /I /Y node_modules ${NODE_MODULES_CACHE}"

                bat "rmdir /s /q ${PLAYWRIGHT_BROWSERS_CACHE} 2>nul || echo 'No old cache'"
                bat "xcopy /E /I /Y node_modules\\playwright\\.local-browsers ${PLAYWRIGHT_BROWSERS_CACHE}"
            }
        }

        stage('Run UI Tests') {
            steps {
                echo "üéØ Running Playwright tests with Allure reporter..."
                script {
                    def testCommand = params.TEST_SUITE == 'all' ?
                        'npx playwright test --reporter=list,allure-playwright' :
                        "npx playwright test --reporter=list,allure-playwright --grep @${params.TEST_SUITE}"

                    bat "${testCommand} || exit /b %ERRORLEVEL%"
                    bat 'npx allure generate allure-results --clean -o allure-report'
                }
            }
        }

        stage('Publish Reports') {
            steps {
                echo "üìÇ Archiving reports..."
                archiveArtifacts artifacts: "${REPORT_DIR}/**", fingerprint: true
                junit 'test-results/**/*.xml'

                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    bat """
                    rmdir /s /q gh-pages 2>nul || echo "no gh-pages folder"
                    git clone --branch gh-pages --depth=1 ${REPO_URL} gh-pages || (
                        git clone ${REPO_URL} gh-pages
                        cd gh-pages
                        git checkout --orphan gh-pages
                        cd ..
                    )

                    set BUILD_FOLDER=${TARGET_DIR}\\${BRANCH_NAME}\\build%BUILD_NUMBER%
                    set LATEST_FOLDER=${TARGET_DIR}\\${BRANCH_NAME}\\latest

                    rmdir /s /q gh-pages\\%LATEST_FOLDER% 2>nul || echo "no latest"
                    mkdir gh-pages\\%BUILD_FOLDER%
                    xcopy ${REPORT_DIR} gh-pages\\%BUILD_FOLDER% /E /I /Y
                    mkdir gh-pages\\%LATEST_FOLDER%
                    xcopy ${REPORT_DIR} gh-pages\\%LATEST_FOLDER% /E /I /Y

                    > gh-pages\\${TARGET_DIR}\\${BRANCH_NAME}\\index.html echo ^<h1^>Allure Reports (Last 15 Builds) - ${BRANCH_NAME}^</h1^>
                    for /f "skip=15 eol=: delims=" %%F in ('dir /b /ad-h /o-d gh-pages\\${TARGET_DIR}\\${BRANCH_NAME}\\build*') do rmdir /s /q gh-pages\\${TARGET_DIR}\\${BRANCH_NAME}\\%%F
                    for /f "eol=: delims=" %%F in ('dir /b /ad-h /o-d gh-pages\\${TARGET_DIR}\\${BRANCH_NAME}\\build*') do (
                        echo ^<p^>^<a href="./%%F/index.html"^>%%F^</a^>^</p^> >> gh-pages\\${TARGET_DIR}\\${BRANCH_NAME}\\index.html
                    )

                    cd gh-pages
                    git config user.name "jenkins"
                    git config user.email "jenkins@ci"
                    git add .
                    git commit -m "ci: update Allure reports - build %BUILD_NUMBER% - ${BRANCH_NAME}"
                    git push --force ${REPO_URL} gh-pages
                    """
                }

                script {
                    echo "üìä Build Report: https://markadvk.github.io/playwright-portfolio/allure-reports/${BRANCH_NAME}/build${env.BUILD_NUMBER}/index.html"
                    echo "üîó Latest Report: https://markadvk.github.io/playwright-portfolio/allure-reports/${BRANCH_NAME}/latest/index.html"
                    echo "üìÇ All Reports: https://markadvk.github.io/playwright-portfolio/allure-reports/${BRANCH_NAME}/"
                }
            }
        }
    }

    post {
        success {
            echo '‚úÖ Build succeeded!'
        }
        failure {
            echo '‚ùå Build failed!'
        }
        always {
            echo 'üîî Pipeline finished'
        }
    }
}
